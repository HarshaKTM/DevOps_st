name: CI/CD with Terraform
on:
  push:
    branches:
    - Complete-CI/CD-with- Terraform

env:
  aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  aws_secret_access_key: ${{ secrets.AWS_SECRET_KEY }}

jobs:
  deploye-onfra:
    runs-on: Linux-latest
    output:
      SERVER_PUBLIC_IP: ${{ step.set-ip.outputs.instance_public_ip}}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: setup terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false    
    - name: terraform init
      id: init
      run: terraform init -backend-config=backend.tf -backend-config="region=us-east-1"
      working-directory: ./terraform
    - name: terraform plan
      id: plan
      run: |-
       terraform plan \
        -var"region=us-east-1" \
        -var"public_key=$PUBLIC_SSH_KEY" \
        -var"private_key=$PRIVATE_SSH_KEY" \
        -var"key_name=deploy-key" \
        -out-PLAN
      working-directory: ./terraform
    - name: terraform apply
      id: apply
      run: terraform apply "PLAN"
      working-directory: ./terraform
    - name: Set Output
      run: |-
        echo "::set-output name=SERVER_PUBLIC_IP::$(terraform output instance_public_ip)"
deploy-app:
  runs-on: linux-latest
  needs: deploy-infra
  steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set ip env variable
      run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
    - name: login to AWS ECR
      user: aws-actions/amazon-ecr-login@v2
    - name: Build and push Docker image
      env:
        REGISTRY: ${{ steps.login.outputs.registry }}
        REPOSITORY: example-node-app
        IMAGE_TAG: ${{ github.sha }}
      run: |-
        docker build -t REGISTRY/REPOSITORY:IMAGE_TAG .
        docker push REGISTRY/REPOSITORY:IMAGE_TAG
    
